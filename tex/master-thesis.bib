@misc{glsp-repo,
  author       = {Philip Langer and Tobias Ortmayr},
  title        = {Eclipse GLSP},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/eclipse-glsp/glsp}},
  commit       = {c29a688bb4fa4d0d14c1cb994bdad55d1d4516e1}
}

@misc{glsp-client-repo,
  author       = {Philip Langer and Tobias Ortmayr},
  title        = {Eclipse GLSP - Client},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/eclipse-glsp/glsp-client}},
  commit       = {7f25dd5b9f33d6b846e6f4ba873c357a985e646d}
}

@misc{edapt-repo,
  author       = {{Eclipse Modeling Project},
  title        = {Eclipse Edapt™ - Migrating EMF Models},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/eclipse-edapt/edapt}},
  commit       = {f916f6010d39e1f4889188d375d10fa4708a057a}
}

@misc{keycloak-repo,
  author       = {Cloud Native Computing Foundation},
  title        = {Keycloak - Open Source Identity and Access Management},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/keycloak/keycloak}},
  commit       = {ab7b835e51cf1569093abdc600fdbe84041d87d6}
}

@misc{terraform-repo,
  author       = {HashiCorp},
  title        = {Terraform},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/hashicorp/terraform}},
  commit       = {2274026c68260dd7be6ca77e72c355a0da6db1b6}
}

@misc{henshin-repo,
  author       = {Daniel Strueber},
  title        = {Henshin},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/eclipse-henshin/henshin/wiki}},
  commit       = {41f826df5a02c10c5ef9738434af379af508782f}
}

@misc{emf-repo,
  author       = {Eclipse Foundation},
  title        = {Eclipse Modeling Framework},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/eclipse-emf/org.eclipse.emf}},
  commit       = {157748e0ecdc2368d1cf451ca9c7fc78431c6c91}
}

@misc{lsp-repo,
  author       = {Microsoft},
  title        = {Language Server Protocol},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/microsoft/language-server-protocol}},
  commit       = {fb079951948ed4fe4100f96f8819e9d9facffc40}
}

@misc{electron-repo,
  author       = {OpenJS Foundation and Electron contributors},
  title        = {Electron},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/electron/electron}},
  commit       = {79cd6a261415c3a60b1b52d79f6e2c21d68398d0}
}

@misc{guice-repo,
  author       = {Google},
  title        = {Google Guice},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/google/guice}},
  commit       = {5e17283ce6780728c6524ecd47709cb23e978863}
}

@misc{nashorn-repo,
  author       = {OpenJDK},
  title        = {Nashorn Engine},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/openjdk/nashorn}},
  commit       = {1b0abe0b45dd419c636fd9ac5878d9e28cf1c8ff}
}

@misc{mdeforge-repo,
  author       = {MDE Group},
  title        = {MDEForge},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/MDEGroup/MDEForge}},
  commit       = {8616e1e112683e98432d4ceafc09921218340d3b}
}

@misc{gson-repo,
  author       = {Google},
  title        = {Gson},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/google/gson}},
  commit       = {dd2fe59c0d3390b2ad3dd365ed6938a5c15844cb}
}

@misc{sprotty-repo,
  author       = {Eclipse Foundation},
  title        = {Sprotty},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/eclipse-sprotty/sprotty}},
  commit       = {a30b0a3a589b66d8fc163f48c8318fccb87ba78a}
}

@misc{glsp-ecore-repo,
  author       = {Eclipse Foundation},
  title        = {ecore-glsp},
  year         = {2025},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/eclipsesource/ecore-glsp}},
  commit       = {6c0bab10dc1a2a0432514b8c1d93bbca00dea3df}
}

@book{emf,
  author    = {Steinberg, David and Budinsky, Frank and Paternostro, Marcelo and Merks, Ed},
  title     = {EMF: Eclipse Modeling Framework 2.0},
  year      = {2009},
  isbn      = {0321331885},
  publisher = {Addison-Wesley Professional},
  edition   = {2nd}
}

@inproceedings{modelchecking2,
  author    = {Clarke, Edmund M.},
  editor    = {Ramesh, S.
               and Sivakumar, G.},
  title     = {Model checking},
  booktitle = {Foundations of Software Technology and Theoretical Computer Science},
  year      = {1997},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {54--56},
  abstract  = {Model checking is an automatic technique for verifying finite-state reactive systems, such as sequential circuit designs and communication protocols. Specifications are expressed in temporal logic, and the reactive system is modeled as a statetransition graph. An efficient search procedure is used to determine whether or not the state-transition graph satisfies the specifications.},
  isbn      = {978-3-540-69659-9}
}

@inbook{modelchecking1,
  author    = {McMillan, Kenneth L.},
  title     = {Model Checking},
  booktitle = {Symbolic Model Checking},
  year      = {1993},
  publisher = {Springer US},
  address   = {Boston, MA},
  pages     = {11--24},
  abstract  = {As mentioned in the introduction, a formal verification system has several basic elements. First, we require a model. A model is an imaginary universe, or more generally, a class of possible imaginary universes. To make our model meaningful, we require a theory that predicts some or all of the possible observations that might be made of the model. An observation generally takes the form of the truth or falsehood of a predicate, or statement about the model. Finally, to verify something meaningful about the model, we require a methodology for proving statements that are true in the theory.},
  isbn      = {978-1-4615-3190-6},
  doi       = {10.1007/978-1-4615-3190-6_2},
  url       = {https://doi.org/10.1007/978-1-4615-3190-6_2}
}

@article{modeltransformation,
  title    = {A Taxonomy of Model Transformation},
  journal  = {Electronic Notes in Theoretical Computer Science},
  volume   = {152},
  pages    = {125-142},
  year     = {2006},
  note     = {Proceedings of the International Workshop on Graph and Model Transformation (GraMoT 2005)},
  issn     = {1571-0661},
  doi      = {https://doi.org/10.1016/j.entcs.2005.10.021},
  url      = {https://www.sciencedirect.com/science/article/pii/S1571066106001435},
  author   = {Tom Mens and Pieter {Van Gorp}},
  keywords = {model transformation, taxonomy, comparison, MDD, MDE},
  abstract = {This article proposes a taxonomy of model transformation, based on the discussions of a working group on model transformation of the Dagstuhl seminar on Language Engineering for Model-Driven Software Development. This taxonomy can be used, among others, to help developers in deciding which model transformation language or tool is best suited to carry out a particular model transformation activity.}
}

@inproceedings{henshin,
  author    = {Arendt, Thorsten
               and Biermann, Enrico
               and Jurack, Stefan
               and Krause, Christian
               and Taentzer, Gabriele},
  editor    = {Petriu, Dorina C.
               and Rouquette, Nicolas
               and Haugen, {\O}ystein},
  title     = {Henshin: Advanced Concepts and Tools for In-Place EMF Model Transformations},
  booktitle = {Model Driven Engineering Languages and Systems},
  year      = {2010},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {121--135},
  abstract  = {The Eclipse Modeling Framework (EMF) provides modeling and code generation facilities for Java applications based on structured data models. Henshin is a new language and associated tool set for in-place transformations of EMF models. The Henshin transformation language uses pattern-based rules on the lowest level, which can be structured into nested transformation units with well-defined operational semantics. So-called amalgamation units are a special type of transformation units that provide a forall-operator for pattern replacement. For all of these concepts, Henshin offers a visual syntax, sophisticated editing functionalities, execution and analysis tools. The Henshin transformation language has its roots in attributed graph transformations, which offer a formal foundation for validation of EMF model transformations. The transformation concepts are demonstrated using two case studies: EMF model refactoring and meta-model evolution.},
  isbn      = {978-3-642-16145-2}
}

@article{transformations-modeldriven,
  author   = {Sendall, S. and Kozaczynski, W.},
  journal  = {IEEE Software},
  title    = {Model transformation: the heart and soul of model-driven software development},
  year     = {2003},
  volume   = {20},
  number   = {5},
  pages    = {42-45},
  keywords = {Heart;Programming;Unified modeling language;XML;Computer languages;Productivity;Java;Automation;Context modeling;Metamodeling},
  doi      = {10.1109/MS.2003.1231150}
}

@inproceedings{henshin-usability,
  author    = {Str{\"u}ber, Daniel
               and Born, Kristopher
               and Gill, Kanwal Daud
               and Groner, Raffaela
               and Kehrer, Timo
               and Ohrndorf, Manuel
               and Tichy, Matthias},
  editor    = {de Lara, Juan
               and Plump, Detlef},
  title     = {Henshin: A Usability-Focused Framework for EMF Model Transformation Development},
  booktitle = {Graph Transformation},
  year      = {2017},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {196--208},
  abstract  = {Improved usability of tools is a fundamental prerequisite for a more widespread industrial adoption of Model-Driven Engineering. We present the current state of Henshin, a model transformation language and framework based on algebraic graph transformations. Our demonstration focuses on Henshin's novel usability-oriented features, specifically: (i) a textual syntax, complementing the existing graphical one by improved support for rapid transformation development, (ii) extended static validation, including checks for correct integration with general-purpose-language code, (iii) advanced refactoring support, in particular, for splitting large transformation programs, (iv) editing utilities for facilitating recurring tasks in model transformation development. We demonstrate the usefulness of these features using a running example.},
  isbn      = {978-3-319-61470-0}
}

@misc{glsp-doc,
  author = {{Eclipse Foundation}},
  title  = {Eclipse GLSP™ – Documentation},
  year   = {2025},
  url    = {https://eclipse.dev/glsp/documentation},
  note   = {Accessed: 2025-05-20}
}

@online{heise-eclipse-foundation,
  author    = {Alexandra Kleijn},
  title     = {Eclipse und die Eclipse Foundation},
  year      = {2006},
  url       = {https://www.heise.de/-221997},
  note      = {Accessed: 2025-6-2},
  publisher = {heise online}
}

@misc{eclipse-review,
  title        = {Die Eclipse Foundation wird 20 Jahre alt: Die interessantesten {SE-Projekte}},
  author       = {Jastram, Michael},
  publisher    = {Systems Engineering Trends},
  month        = dec,
  year         = 2024,
  howpublished = {\url{https://www.se-trends.de/eclipse-foundation-wird-20-jahre-alt/}},
  note         = {Accessed: 2025-6-2},
  language     = {de}
}

@misc{eclipse-report,
  title        = {2024 Annual Community Report},
  author       = {{Eclipse Foundation}},
  year         = 2024,
  howpublished = {\url{https://www.eclipse.org/org/foundation/reports/annual_report.php}},
  note         = {Accessed: 2025-6-2},
  language     = {en}
}

@online{eclipse_modeling,
  author    = {{Eclipse Foundation}},
  title     = {Eclipse Modeling Project},
  year      = {2025},
  url       = {https://eclipse.dev/modeling/},
  note      = {Accessed: 2025-06-02},
  publisher = {Eclipse Foundation}
}

@online{eclipse_emf,
  author    = {{Eclipse Foundation}},
  title     = {Eclipse Modeling Framework},
  year      = {2025},
  url       = {https://eclipse.dev/emf/},
  note      = {Accessed: 2025-06-02},
  publisher = {Eclipse Foundation}
}

@inproceedings{glsp-vision,
  author    = {Bork, Dominik
               and Langer, Philip
               and Ortmayr, Tobias},
  editor    = {Almeida, Jo{\~a}o Paulo A.
               and Kaczmarek-He{\ss}, Monika
               and Koschmider, Agnes
               and Proper, Henderik A.},
  title     = {A Vision for Flexible GLSP-Based Web Modeling Tools},
  booktitle = {The Practice of Enterprise Modeling},
  year      = {2024},
  publisher = {Springer Nature Switzerland},
  address   = {Cham},
  pages     = {109--124},
  abstract  = {In the past decade, the modeling community has produced many feature-rich modeling editors and tool prototypes not only for modeling standards but particularly also for many domain-specific languages. More recently, however, web-based modeling tools have started to become increasingly popular in the industry for visualizing and editing models adhering to such languages. This new generation of modeling tools is built with web technologies and offers much more flexibility when it comes to their user experience, accessibility, reuse, and deployment options. One of the technologies behind this new generation of tools is the Graphical Language Server Platform (GLSP), an open-source client-server framework hosted under the Eclipse foundation, which allows tool developers to build modern diagram editors for modeling tools that run in the browser or can be easily integrated into IDEs such as Eclipse, VS Code, or Theia. In this paper, we describe our vision for more flexible modeling tools which is based on our experiences from developing several traditional and web-based modeling tools in an industrial and academic context. With that, we aim at sparking a new line of research and innovation in the modeling community for modeling tool development practices and to explore opportunities, advantages, and limitations of web-based modeling tools, as well as bridge the gap between scientific tool prototypes and industrial tools being used in practice.},
  isbn      = {978-3-031-48583-1}
}

@inproceedings{glsp-lessons,
  author    = {Metin, Haydar and Bork, Dominik},
  booktitle = {2023 ACM/IEEE 26th International Conference on Model Driven Engineering Languages and Systems (MODELS)},
  title     = {On Developing and Operating GLSP-based Web Modeling Tools: Lessons Learned from BIGUML},
  year      = {2023},
  volume    = {},
  number    = {},
  pages     = {129-139},
  keywords  = {Knowledge engineering;Codes;Unified modeling language;Computer architecture;Reflection;Software;Model driven engineering;Modeling tool;GLSP;web modeling;lessons learned;LSP;eclipse},
  doi       = {10.1109/MODELS58315.2023.00031}
}

@inproceedings{glsp-zoom,
  author    = {De Carlo, Giuliano and Langer, Philip and Bork, Dominik},
  title     = {Advanced visualization and interaction in GLSP-based web modeling: realizing semantic zoom and off-screen elements},
  year      = {2022},
  isbn      = {9781450394666},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3550355.3552412},
  doi       = {10.1145/3550355.3552412},
  abstract  = {Conceptual modeling is widely adopted in industrial practices, e.g., process, software, and systems modeling. Providing adequate and usable modeling tools is essential for the efficient adoption of modeling. Metamodeling platforms provide a rich set of functionalities and maturely realize state-of-the-art modeling tools. However, despite their maturity and stability, most of these platforms only slowly - if at all - leverage the full extent of functionalities and the ease of exploitation and integration enabled by web technologies. With the Graphical Language Server Protocol (GLSP), it is now possible to realize much richer, advanced opportunities for visualizing and interacting with conceptual models. This paper presents a concept and a prototypical implementation of two advanced model visualization and interaction functionalities with the Eclipse GLSP platform: Semantic Zoom and Off-Screen Elements. We believe such advanced functionalities pave the way for a prosperous modeling future and spark innovation in modeling tool development.},
  booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems},
  pages     = {221-231},
  numpages  = {11},
  keywords  = {web modeling, visualization, modeling tools, language server protocol},
  location  = {Montreal, Quebec, Canada},
  series    = {MODELS '22}
}

@misc{elk-engine,
  title         = {The Eclipse Layout Kernel},
  author        = {Sören Domrös and Reinhard von Hanxleden and Miro Spönemann and Ulf Rüegg and Christoph Daniel Schulze},
  year          = {2023},
  eprint        = {2311.00533},
  archiveprefix = {arXiv},
  primaryclass  = {cs.DS},
  url           = {https://arxiv.org/abs/2311.00533}
}

@inproceedings{webDPF,
  author    = {Rabbi, Fazle and Lamo, Yngve and Yu, Ingrid Chieh and Kristensen, Lars Michael},
  booktitle = {2016 4th International Conference on Model-Driven Engineering and Software Development (MODELSWARD)},
  title     = {WebDPF: A web-based metamodelling and model transformation environment},
  year      = {2016},
  volume    = {},
  number    = {},
  pages     = {87-98},
  keywords  = {Tools;Semantics;Analytical models;Navigation;Software;Visualization;Silicon;Model Driven Engineering;Metamodelling;Model Transformation;Domain Specific Modelling;Model Completion},
  doi       = {}
}

@techreport{webGME,
  author = {Miklós Maróti and Tamás Kecskés and Róbert Kereskényi and Brian Broll and Péter Völgyesi and László Jurácz and Tihamér Levendoszky and Ákos Lédéczi},
  title  = {Next Generation (Meta)Modeling: Web- and Cloud‑based Collaborative Tool Infrastructure},
  type   = {White paper / Technical report},
  year   = {2014},
  note   = {White paper available at \url{https://webgme.org/WebGMEWhitePaper.pdf}}
}

@inproceedings{atompm,
  title     = {AToMPM: A web-based modeling environment},
  author    = {Syriani, Eugene and Vangheluwe, Hans and Mannadiar, Raphael and Hansen, Conner and Van Mierlo, Simon and Ergin, Huseyin},
  booktitle = {Joint proceedings of MODELS'13 Invited Talks, Demonstration Session, Poster Session, and ACM Student Research Competition co-located with the 16th International Conference on Model Driven Engineering Languages and Systems (MODELS 2013): September 29-October 4, 2013, Miami, USA},
  pages     = {21--25},
  year      = {2013}
}

@article{kahani2019survey,
  title     = {Survey and classification of model transformation tools},
  author    = {Kahani, Nafiseh and Bagherzadeh, Mojtaba and Cordy, James R and Dingel, Juergen and Varr{\'o}, Daniel},
  journal   = {Software \& Systems Modeling},
  volume    = {18},
  pages     = {2361--2397},
  year      = {2019},
  publisher = {Springer}
}

@article{tcore,
  author     = {Syriani, Eugene and Vangheluwe, Hans and Lashomb, Brian},
  title      = {T-Core: a framework for custom-built model transformation engines},
  year       = {2015},
  issue_date = {July      2015},
  publisher  = {Springer-Verlag},
  address    = {Berlin, Heidelberg},
  volume     = {14},
  number     = {3},
  issn       = {1619-1366},
  url        = {https://doi.org/10.1007/s10270-013-0370-4},
  doi        = {10.1007/s10270-013-0370-4},
  abstract   = {A large number of model transformation languages and tools have emerged since the early 2000s. A transformation engineer is thus left with too many choices for the language he use to perform a specific transformation task. Furthermore, it is currently not possible to combine or reuse transformations implemented in different languages. We therefore propose T-Core, a framework where primitive transformation constructs can be combined to define and encapsulate reusable model transformation idioms. In this context, the transformation engineer is free to use existing transformation building blocks from an extensible library or define his own transformation units. The proposed primitive transformation operators are the result of deconstructing different existing transformation languages. Reconstructing these languages offers a common basis to compare their expressiveness, provides a framework for inter-operating them, and allows the transformation engineer to design transformations with the most appropriate constructs for the task at hand.},
  journal    = {Softw. Syst. Model.},
  month      = jul,
  pages      = {1215–1243},
  numpages   = {29},
  keywords   = {Transformation library, Reengineering, Model transformation, Domain-specific model transformation}
}

@misc{webgme-website,
  publisher = {Vanderbilt University},
  title     = {WebGME: Web-based Generic Modeling Environment},
  year      = {2025},
  url       = {https://webgme.org/},
  note      = {Accessed: 2025-06-18}
}

@inproceedings{mdeforge,
  title        = {Mdeforge: an extensible web-based modeling platform},
  author       = {Basciani, Francesco and DI SALLE, Amleto and Iovino, Ludovico and Alfonso, Pierantonio and others},
  booktitle    = {Proceedings of the 2nd International Workshop on Model-Driven Engineering on and for the Cloud co-located with the 17th International Conference on Model Driven Engineering Languages and Systems, CloudMDE@ MoDELS 2014, Valencia, Spain, September 30, 2014},
  volume       = {1242},
  pages        = {66--75},
  year         = {2014},
  organization = {CEUR-WS}
}

@misc{eclipse-doc,
  author = {{Eclipse Foundation}},
  title  = {Eclipse Documentation - Current Release},
  year   = {2025},
  url    = {https://help.eclipse.org/latest/index.jsp},
  note   = {Accessed: 2025-06-28}
}

@misc{stackoverflow2024survey,
  author = {{Stack Overflow}},
  title  = {{Stack Overflow Developer Survey 2024: Technology}},
  url    = {\url{https://survey.stackoverflow.co/2024/technology#most-popular-technologies-new-collab-tools}},
  year   = {2024},
  month  = {May-June},
  note   = {Accessed: 2025-06-28}
}

@manual{vscode-doc,
  title  = {{Visual Studio Code Documentation}},
  author = {{Microsoft Corporation}},
  year   = {2025},
  url    = {https://code.visualstudio.com/docs},
  note   = {Accessed: 2025-06-28}
}

@misc{theia-doc,
  title        = {Eclipse Theia Documentation},
  url          = {\url{https://theia-ide.org/docs/}},
  note         = {Accessed: 2025-06-28},
  year         = {2025},
  organization = {Eclipse Foundation}
}

@misc{theia-cloud-doc,
  title        = {Theia Cloud},
  url          = {\url{https://theia-cloud.io/documentation/}},
  note         = {Accessed: 2025-06-28},
  year         = {2025},
  organization = {Eclipse Foundation}
}

@misc{kubernetes,
  title        = {Kubernetes Documentation},
  url          = {\url{https://kubernetes.io/docs/home/}},
  note         = {Accessed: 2025-06-28},
  year         = {2025},
  organization = {Linux Foundation}
}

@article{docker,
  title   = {Docker: lightweight linux containers for consistent development and deployment},
  author  = {Merkel, Dirk},
  journal = {Linux journal},
  volume  = {2014},
  number  = {239},
  pages   = {2},
  year    = {2014}
}

@inproceedings{manhattan,
  author    = {Koh, Cheng-Kok and Madden, Patrick H.},
  title     = {Manhattan or non-Manhattan? a study of alternative VLSI routing architectures},
  year      = {2000},
  isbn      = {1581132514},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/330855.330961},
  doi       = {10.1145/330855.330961},
  abstract  = {Circuit interconnect has become a substantial obstacle in the design of high performance systems. In this paper we explore a new routing paradigm that strikes at the root of the interconnect problem by reducing wire lengths directly. We present a non-Manhattan Steiner tree heuristic, obtaining wire length reductions of much as 17\% on average, when compared to rectilinear topologies. Moreover, we present a graph-based interconnect optimization algorithm, called the GRATS-tree algorithm, which allows performance optimization beyond what can be obtained through wire length reduction alone. The two tree construction algorithms are integrated into a new global router that allows large scale non-Manhattan design. Although we consider circuit placements performed under rectilinear objectives, our global router can reduce maximum congestion levels by as much as 20\%. In general we find that the non-Manhattan approach requires additional Steiner points and bends; realization of non-Manhattan routing structures requires additional vias. We observe that the increase in via cost is much less dramatic than might be expected; the benefits of wire length reduction may outweigh the additional via cost.},
  booktitle = {Proceedings of the 10th Great Lakes Symposium on VLSI},
  pages     = {47–52},
  numpages  = {6},
  location  = {Chicago, Illinois, USA},
  series    = {GLSVLSI '00}
}

@misc{claude_sonnet,
  author = {{Anthropic}},
  title  = {Claude 3 Sonnet},
  year   = {2024},
  url    = {https://www.anthropic.com/claude/sonnet},
  note   = {Accessed: 2025-07-23}
}

@misc{intellij,
  author = {{JetBrains}},
  title  = {IntelliJ IDEA},
  year   = {2024},
  url    = {https://www.jetbrains.com/idea/},
  note   = {Accessed: 2025-07-23}
}

@misc{vscode,
  author = {{Microsoft}},
  title  = {Visual Studio Code},
  year   = {2024},
  url    = {https://code.visualstudio.com/},
  note   = {Accessed: 2025-07-23}
}

@misc{glsp-collab,
  author       = {Helming, Jonas and Koegel, Maximilian and Langer, Philip},
  title        = {Real-time Collaboration on Diagrams with Eclipse GLSP},
  howpublished = {Blog post, EclipseSource},
  year         = {2024},
  month        = {Feb},
  day          = {21},
  url          = {https://eclipsesource.com/blogs/2024/02/21/real-time-collaboration-on-diagrams-with-eclipse-glsp/},
  note         = {Accessed: 2025-10-22}
}